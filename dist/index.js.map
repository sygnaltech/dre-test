{
  "version": 3,
  "sources": ["../src/pages/dre-test.ts", "../src/index.ts"],
  "sourcesContent": ["\n\n\n/**\n * DRE Test\n * /test\n * \n */\n\nexport class DreTest {\n\n    constructor() {\n\n    }\n\n    init() {\n\n        // Find all input elements with the custom attribute 'dre-id' \n        // set the value to the dre-id \n        const inputs: NodeListOf<HTMLInputElement> = document.querySelectorAll('input[dre-id]');\n        inputs.forEach((input: HTMLInputElement) => {\n            const dreIdValue: string | null = input.getAttribute('dre-id');\n            if (dreIdValue) {\n                input.value = dreIdValue;\n            }\n        });\n\n        // Form [dre-form]\n        // install submit handler \n        const forms: NodeListOf<HTMLFormElement> | null = document.querySelectorAll('[dre-form] > form');\n        forms.forEach((form: HTMLFormElement) => {\n            console.log(\"installing listener on form\", form); \n            form.addEventListener('submit', (event: Event) => {\n\n                // Prevent default form submission\n                event.preventDefault();\n\n                // Get the action attribute value\n                const action: string = form.getAttribute('action') || '';\n\n                console.debug(\"submitting\", action); \n\n                // Construct the form data as an object\n                const formData: FormData = new FormData(form);\n\n                // Aggregate the checkbox-selected items into an array\n\n                let dreId: string[] = [];\n\n                // Find all checkboxes with the custom attribute 'dre-id' within the form\n                const checkboxes: NodeListOf<HTMLInputElement> = form.querySelectorAll('input[type=\"checkbox\"][dre-id]');\n                \n                checkboxes.forEach((checkbox: HTMLInputElement) => {\n                    if (checkbox.checked) {\n                        const dreIdValue: string | null = checkbox.getAttribute('dre-id');\n                        if (dreIdValue) {\n                            dreId.push(dreIdValue);\n                        }\n                    }\n                });\n\n                // console.log(dreId); // This will log the array of checked dre-id values\n\n                var formDataObject: { [key: string]: any } = {};\n                formData.forEach((value, key) => {\n                    formDataObject[key] = value;\n                });\n\n                formDataObject['dre_ID'] = dreId;\n                // Add our array\n                // formDataObject.append('dre_ID', dreId);\n\n                // Log the JSON data\n                console.log(JSON.stringify(formDataObject));\n\n                // POST the form data to the webhook\n                // defined in form[action] \n\n                // Convert formDataObject to JSON and send it via a POST request\n                fetch(action, {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/json'\n                    },\n                    body: JSON.stringify(formDataObject)\n                })\n                //.then(response => response.json()) \n                .then(async response => {\n\n                    // TODO: do something with the response? \n                    // TODO: change response to JSON? \n\n                    console.debug(\"SERVER RESPONDED\", await response.text()); \n\n                })  // assuming server responds with json\n                .then(data => {\n                    console.debug(data);\n                })\n                .catch((error) => {\n                    console.error('Error:', error);\n                });\n\n            });\n        }); \n\n\n\n    // capture action\n    // prefent default \n\n    }\n\n}", "import { DreTest } from \"./pages/dre-test\";\n\nconst init = () => { \n\n    console.log(\"DRE-lib\", 'loaded');\n\n    console.log(\"DRE-lib\", window.location.pathname);\n\n    switch(window.location.pathname) {\n        case \"/test\":\n\n            console.log(\"DRE-lib\", \"Init | TEST page\");\n\n            (new DreTest()).init(); \n\n            break;\n    }\n\n/*\n\n    // Find all input elements with the custom attribute 'dre-id' \n    // set the value to the dre-id \n    const inputs: NodeListOf<HTMLInputElement> = document.querySelectorAll('input[dre-id]');\n    inputs.forEach((input: HTMLInputElement) => {\n        const dreIdValue: string | null = input.getAttribute('dre-id');\n        if (dreIdValue) {\n            input.value = dreIdValue;\n        }\n    });\n\n\n\n// Form [dre-form]\n// install submit handler \n\n\n    // Find the form element with the custom attribute 'dre-form'\n    const forms: NodeListOf<HTMLFormElement> | null = document.querySelectorAll('[dre-form] > form');\n    forms.forEach((form: HTMLFormElement) => {\n        console.log(\"installing listener on form\", form); \n        form.addEventListener('submit', (event: Event) => {\n\nconsole.log(\"submitting\"); \n\n            // Prevent default form submission\n            event.preventDefault();\n//event.stopPropagation();\n\n            // Get the action attribute value\n            const action: string = form.getAttribute('action') || '';\nconsole.log(action);\n\n            // Construct the form data as an object\n            const formData: FormData = new FormData(form);\n\n\n\n            let dreId: string[] = [];\n\n            // Find all checkboxes with the custom attribute 'dre-id' within the form\n            const checkboxes: NodeListOf<HTMLInputElement> = form.querySelectorAll('input[type=\"checkbox\"][dre-id]');\n            \n            checkboxes.forEach((checkbox: HTMLInputElement) => {\n                if (checkbox.checked) {\n                    const dreIdValue: string | null = checkbox.getAttribute('dre-id');\n                    if (dreIdValue) {\n                        dreId.push(dreIdValue);\n                    }\n                }\n            });\n            \n            // console.log(dreId); // This will log the array of checked dre-id values\n            // dreId.forEach((value: string) => {\n            //     formData.append('dreId[]', value);\n            // });\n//            formData.append(\"dre_ID\", dreId);\n\n\nvar formDataObject: { [key: string]: any } = {};\nformData.forEach((value, key) => {\n    formDataObject[key] = value;\n});\n\nformDataObject['dre_ID'] = dreId;\n// Add our array\n// formDataObject.append('dre_ID', dreId);\n\n// Log the JSON data\nconsole.log(JSON.stringify(formDataObject));\n\n\n// return; \n\n// Convert formDataObject to JSON and send it via a POST request\nfetch(action, {\n    method: 'POST',\n    headers: {\n        'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(formDataObject)\n})\n//.then(response => response.json())  // assuming server responds with json\n.then(async response => {\n    console.log(\"SERVER RESPONDED\", await response.text()); \n})  // assuming server responds with json\n.then(data => {\n    console.log(data);\n})\n.catch((error) => {\n    console.error('Error:', error);\n});\n\n\n//            return false; \n        });\n    }); \n\n\n\n// capture action\n// prefent default \n*/ \n}\n\ndocument.addEventListener(\"DOMContentLoaded\", init)"],
  "mappings": ";;AASO,MAAM,UAAN,MAAc;AAAA,IAEjB,cAAc;AAAA,IAEd;AAAA,IAEA,OAAO;AAIH,YAAM,SAAuC,SAAS,iBAAiB,eAAe;AACtF,aAAO,QAAQ,CAAC,UAA4B;AACxC,cAAM,aAA4B,MAAM,aAAa,QAAQ;AAC7D,YAAI,YAAY;AACZ,gBAAM,QAAQ;AAAA,QAClB;AAAA,MACJ,CAAC;AAID,YAAM,QAA4C,SAAS,iBAAiB,mBAAmB;AAC/F,YAAM,QAAQ,CAAC,SAA0B;AACrC,gBAAQ,IAAI,+BAA+B,IAAI;AAC/C,aAAK,iBAAiB,UAAU,CAAC,UAAiB;AAG9C,gBAAM,eAAe;AAGrB,gBAAM,SAAiB,KAAK,aAAa,QAAQ,KAAK;AAEtD,kBAAQ,MAAM,cAAc,MAAM;AAGlC,gBAAM,WAAqB,IAAI,SAAS,IAAI;AAI5C,cAAI,QAAkB,CAAC;AAGvB,gBAAM,aAA2C,KAAK,iBAAiB,gCAAgC;AAEvG,qBAAW,QAAQ,CAAC,aAA+B;AAC/C,gBAAI,SAAS,SAAS;AAClB,oBAAM,aAA4B,SAAS,aAAa,QAAQ;AAChE,kBAAI,YAAY;AACZ,sBAAM,KAAK,UAAU;AAAA,cACzB;AAAA,YACJ;AAAA,UACJ,CAAC;AAID,cAAI,iBAAyC,CAAC;AAC9C,mBAAS,QAAQ,CAAC,OAAO,QAAQ;AAC7B,2BAAe,OAAO;AAAA,UAC1B,CAAC;AAED,yBAAe,YAAY;AAK3B,kBAAQ,IAAI,KAAK,UAAU,cAAc,CAAC;AAM1C,gBAAM,QAAQ;AAAA,YACV,QAAQ;AAAA,YACR,SAAS;AAAA,cACL,gBAAgB;AAAA,YACpB;AAAA,YACA,MAAM,KAAK,UAAU,cAAc;AAAA,UACvC,CAAC,EAEA,KAAK,OAAM,aAAY;AAKpB,oBAAQ,MAAM,oBAAoB,MAAM,SAAS,KAAK,CAAC;AAAA,UAE3D,CAAC,EACA,KAAK,UAAQ;AACV,oBAAQ,MAAM,IAAI;AAAA,UACtB,CAAC,EACA,MAAM,CAAC,UAAU;AACd,oBAAQ,MAAM,UAAU,KAAK;AAAA,UACjC,CAAC;AAAA,QAEL,CAAC;AAAA,MACL,CAAC;AAAA,IAOL;AAAA,EAEJ;;;AC9GA,MAAM,OAAO,MAAM;AAEf,YAAQ,IAAI,WAAW,QAAQ;AAE/B,YAAQ,IAAI,WAAW,OAAO,SAAS,QAAQ;AAE/C,YAAO,OAAO,SAAS,UAAU;AAAA,MAC7B,KAAK;AAED,gBAAQ,IAAI,WAAW,kBAAkB;AAEzC,QAAC,IAAI,QAAQ,EAAG,KAAK;AAErB;AAAA,IACR;AAAA,EA0GJ;AAEA,WAAS,iBAAiB,oBAAoB,IAAI;",
  "names": []
}
